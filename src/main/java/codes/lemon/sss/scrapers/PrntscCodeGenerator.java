package codes.lemon.sss.scrapers;
import java.math.*;


/***
 * This code generator produces valid 6 digit image identifier codes
 * for printsc images. These 6 digit codes can contain a mixture of letters 
 * a-z (case sensitive), and numbers 0 - 9. The code generator requires a base 
 * code to be supplied by the user upon initialisation. By treating the 6 digit 
 * code as a base36 ([0-9] + [a-z]) integer we can increment the code by 1 to find the 
 * next valid code. This implementation takes advantage of this to generate IDs sequentially.
 * The class checks the base code is valid, if it isn't then the class fixes the code as best
 * it can.
 * @author lemon
 */
class PrntscCodeGenerator {
    private static final int RADIX = 36;  // len([a-z] + [0-9]) = base36
    private static final int VALID_CODE_LENGTH = 6;
    private static final String DEFAULT_BASE_CODE = "n6xzas";
    private String codeCurrent;

    /**
     * Constructs a PrntscCodeGenerator instance which increments a default base code to generate new codes.
     */
    public PrntscCodeGenerator() {
        codeCurrent = DEFAULT_BASE_CODE;
    }

    /**
     * Constructs a PrntscCodeGenerator instance which increments <i>baseCode</i> to generate new
     * codes on each call to <i>getNextCode()</i>. The first call to <i>getNextCode()</i> will return <i>baseCode</i>
     * @param baseCode a valid prntsc image ID which will be incremented to identify subsequent images
     */
    public PrntscCodeGenerator(String baseCode) {
        // attempt to fix any errors in code and decrement by 1 to ensure
        // the supplied baseCode is returned upon the first call to getNextCode()
        codeCurrent = incrementCode(fixCode(baseCode), -1);

    }


    /***
     * Returns a newly generated image id code for a prnt.sc image.
     * The new id code is generated by incrementing the last generated code.
     * This newly generated code will be store within the code generator, and can be
     * retrieved again with a call to getCurrentCode().
     * Image IDs are generated sequentially with each new call to getNextCode().
     * Image IDs are composed of six base36(0-9,a-z) digits.
     * @return a newly generated valid prnt.sc image id
     */
    public String getNextCode() {
        codeCurrent = incrementCode(codeCurrent, 1);
        return codeCurrent;
    }

    /**
     * Performs some checks to try and ensure the validity of codeToFix.
     * Removes white space, punctuation, converts uppercase to lowercase,
     * pads to the left with 0 if code length is too short, removes most
     * significant digits if code is too long.
     * @param codeToFix code to be fixed (if it contains errors)
     */
    private static String fixCode(String codeToFix) {
        String code = codeToFix.replaceAll("\\p{Punct}", "").replaceAll(" ", "").toLowerCase().trim();

        // Ensure code is of valid length
        while (code.length() > VALID_CODE_LENGTH) {
            // remove the most significant character to reduce length
            code = code.substring(1);
        }

        // check for missing leading 0's which are lost when converting RADIX
        while (code.length() < VALID_CODE_LENGTH) {
            // StringBuilder not required since very few (if any) iterations are expected
            code = "0" + code;
        }
        return code;
    }

    /***
     * Increments a prntsc Image ID code (base 36) by <i>count</i> to generate a new prntsc Image ID.
     * Codes are incremented sequentially and no valid codes are missed.
     * Negative <i>count</i> values can be supplied to decrement the code instead.
     * @param code a valid prntsc Image ID
     * @param count the number of valid IDs to increment by.
     * @return <i>code</i> incremented by <i>count</i>
     */
    private static String incrementCode(String code, int count) {

        BigInteger newCode =  new BigInteger(code, RADIX); // convert to base 10
        newCode = BigInteger.valueOf(count).add(newCode); // increment by count
        return fixCode(newCode.toString(RADIX)); //convert back to base36 and fix if required
    }


}